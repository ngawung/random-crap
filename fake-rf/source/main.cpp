#include <nds.h>
#include <filesystem.h>
#include <iostream>
#include <fstream>
#include "lz77.h"


bool change = false;

u8 tiles[] =
{
//Tile 0: transparent tile
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
//Tile 1: solid tile using color index 1
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
//Tile 2: solid tile using color index 2	
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
	2,2,2,2,2,2,2,2,
//Tile 3: smily face tile	
	0,0,1,1,1,1,0,0,
	0,1,1,1,1,1,1,0,
	1,1,2,1,1,2,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,2,1,1,1,1,2,1,
	0,1,2,2,2,2,1,0,
	0,0,1,1,1,1,0,0,

	
};

u8 tiles2[] = {
//Tile 0: transparent tile
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
//Tile 1: solid tile using color index 0
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
//Tile 2: solid tile using color index 0	
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
	0,0,0,0,0,0,0,0,
//Tile 3: smily face tile	
	0,0,1,1,1,1,0,0,
	0,1,1,1,1,1,1,0,
	1,1,2,1,1,2,1,1,
	1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,
	1,2,1,1,1,1,2,1,
	0,1,2,2,2,2,1,0,
	0,0,1,1,1,1,0,0,

	
};


u16 map32x32[] = 
{
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,300,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,
	1,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,2,1,
	1,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,3,3,1,1,1,1,1,1,3,3,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,3,1,1,1,1,1,1,3,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,3,3,3,3,3,3,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,
	
};

u16 palette[] = 
{
	RGB15(0,0,0),
	RGB15(31,31,0),
	RGB15(0,31,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
	RGB15(0,0,0),
};



int main(void) {
	consoleDemoInit();

	videoSetMode(MODE_0_2D);
	vramSetBankA(VRAM_A_MAIN_BG);

	if(nitroFSInit(NULL)) {
		chdir("nitro:/");
		std::cout << "success nitrofs" << std::endl;
		
		std::ifstream in("compressed", std::ios::in | std::ios::binary);

		std::string inp;
		std::string data;
		in.seekg(0, std::ios::end);
		data.resize(in.tellg());
		in.seekg(0, std::ios::beg);
		in.read(&data[0], data.size());
		in.close();

		std::string out;

		// swiDecompressLZSSWram(data.data(), &out);
		// decompress(data.c_str(), &out, LZ77);

		lz77::decompress_t decompress;
		std::string extra;

		if (!decompress.feed(data, extra) || extra.size() > 0) {
			std::cout << "Sanity error: failed to decompress whole buffer." << std::endl;
			return 1;
		}

		std::cout << decompress.result() << std::endl;

	} else {
		std::cout << "failed nitrofs" << std::endl;
	}
	
	while(1) {
		int bg = bgInit(0, BgType_Text8bpp, BgSize_T_256x256, 0,1);

		change = !change;
		
		if (change) dmaCopy(tiles, bgGetGfxPtr(bg), sizeof(tiles));
		else dmaCopy(tiles2, bgGetGfxPtr(bg), sizeof(tiles));
		
		dmaCopy(map32x32, bgGetMapPtr(bg),  sizeof(map32x32));
		dmaCopy(palette, BG_PALETTE, sizeof(palette));
		
		// scroll(bg, 256, 256);
		swiWaitForVBlank();
	}

	return 0;
}
